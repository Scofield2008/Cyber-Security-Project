import tkinter as tk
from tkinter import ttk, messagebox
import requests
from datetime import datetime
import os

class XSSTester:
    def __init__(self, root):
        self.root = root
        self.root.title("XSS Attack Tester")
        self.root.geometry("500x380")
        self.root.configure(bg="#1e1e2f")
        self.create_widgets()
    
    def create_widgets(self):
        style = ttk.Style()
        style.theme_use('clam')
        style.configure("TLabel", background="#1e1e2f", foreground="#e0e0e0", font=("Segoe UI", 10))
        style.configure("TButton", font=("Segoe UI", 10))
        style.configure("TEntry", font=("Segoe UI", 10))

        ttk.Label(self.root, text="Target URL (with PARAM placeholder):").pack(pady=(20, 5))
        self.url_entry = ttk.Entry(self.root, width=60)
        self.url_entry.insert(0, "http://127.0.0.1:5000/search?q=PARAM")
        self.url_entry.pack()

        ttk.Label(self.root, text="XSS Payload:").pack(pady=(15, 5))
        self.payload_entry = ttk.Entry(self.root, width=60)
        self.payload_entry.insert(0, "<script>alert('XSS')</script>")
        self.payload_entry.pack()

        self.test_btn = ttk.Button(self.root, text="Test XSS", command=self.test_xss)
        self.test_btn.pack(pady=20)

        self.result_text = tk.Text(self.root, height=8, width=60, bg="#2a2e3e", fg="#d8dee9", font=("Consolas", 10))
        self.result_text.pack(pady=10)

    def test_xss(self):
        url_template = self.url_entry.get().strip()
        payload = self.payload_entry.get().strip()

        if "PARAM" not in url_template:
            messagebox.showerror("Input Error", "URL must contain 'PARAM' placeholder.")
            return

        test_url = url_template.replace("PARAM", requests.utils.quote(payload))

        try:
            response = requests.get(test_url, timeout=10)
            reflected = payload in response.text

            result = f"[âœ“] Sent GET to: {test_url}\n"
            result += f"Status: {response.status_code}\n"
            result += "[!] XSS vulnerability detected!" if reflected else "[-] XSS not reflected."

            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, result)

            self.save_to_file(test_url, payload, response.status_code, reflected)
        except Exception as e:
            messagebox.showerror("Request Error", str(e))

    def save_to_file(self, url, payload, status_code, is_vulnerable):
        try:
            os.makedirs("xss_test_logs", exist_ok=True)
            filename = f"xss_test_logs/xss_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
            with open(filename, "w", encoding="utf-8") as f:
                f.write("=== XSS Test Report ===\n")
                f.write(f"Date/Time: {datetime.now()}\n")
                f.write(f"Target URL: {url}\n")
                f.write(f"Payload: {payload}\n")
                f.write(f"Response Status Code: {status_code}\n\n")
                f.write("Result: XSS Detected\n" if is_vulnerable else "Result: No XSS detected\n")
            
            print(f"[+] XSS report saved to {filename}")
        except Exception as e:
            print(f"[-] Failed to save report: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = XSSTester(root)
    root.mainloop()
