# vulnerable_app.py
from flask import Flask, request, render_template_string

app = Flask(__name__)

# A dummy user database
users = {
    'admin': 'admin123',
    'user': 'userpass'
}

login_form = '''
    <form method="post" action="/login">
      Username: <input type="text" name="username"/><br/>
      Password: <input type="password" name="password"/><br/>
      <input type="submit" value="Login"/>
    </form>
'''

@app.route('/')
def home():
    return login_form

@app.route('/login', methods=['POST'])
def login():
    username = request.form.get('username', '')
    password = request.form.get('password', '')

    # Vulnerable check: no input sanitization, vulnerable to SQL injection mimic
    # This is just a simulation; no real SQL but mimicking logic flaw:
    if username in users and users[username] == password:
        return f"Welcome {username}! <a href='/logout'>Logout</a>"
    # Simulate SQLi effect: if password contains "' OR '1'='1"
    if "' OR '1'='1" in password:
        return f"Welcome {username}! <a href='/logout'>Logout</a> (Bypassed with SQLi!)"
    return "Login failed. Try again." + login_form

if __name__ == "__main__":
    app.run(debug=True)
