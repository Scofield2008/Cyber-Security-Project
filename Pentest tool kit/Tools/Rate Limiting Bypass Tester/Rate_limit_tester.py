import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import time
import os
from datetime import datetime
import random

class RateLimitBypassTool:
    def __init__(self, root):
        self.root = root
        self.root.title("Rate Limiting Bypass Tester")
        self.root.geometry("520x420")
        self.root.configure(bg="#262836")
        self.create_widgets()

    def create_widgets(self):
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("TLabel", background="#262836", foreground="#ffffff", font=("Segoe UI", 10))
        style.configure("TButton", font=("Segoe UI", 10))

        ttk.Label(self.root, text="Dummy API Response File (TXT):").pack(pady=(20, 5))
        self.file_entry = ttk.Entry(self.root, width=60)
        self.file_entry.pack(pady=2)
        ttk.Button(self.root, text="Browse", command=self.browse_file).pack(pady=5)

        ttk.Button(self.root, text="Simulate Bypass Attempts", command=self.simulate_bypass).pack(pady=10)

        self.result_box = tk.Text(self.root, height=15, width=65, bg="#2e303e", fg="#d8dee9", font=("Consolas", 10))
        self.result_box.pack(pady=10)

    def browse_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
        self.file_entry.delete(0, tk.END)
        self.file_entry.insert(0, file_path)

    def simulate_bypass(self):
        file_path = self.file_entry.get().strip()
        if not os.path.isfile(file_path):
            messagebox.showerror("File Error", "Dummy file not found.")
            return

        self.result_box.delete(1.0, tk.END)
        methods = ["Change User-Agent", "X-Forwarded-For spoofing", "Low delay burst"]
        response = ""
        for method in methods:
            success = random.choice([True, False])
            line = f"[{'✓' if success else '!'}] Attempt using {method} — {'Worked' if success else 'Blocked'}\n"
            response += line
            self.result_box.insert(tk.END, line)
            time.sleep(0.3)

        self.save_report(file_path, response)

    def save_report(self, src, result):
        os.makedirs("rate_limit_logs", exist_ok=True)
        filename = f"rate_limit_logs/rate_limit_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(filename, "w") as f:
            f.write("=== Rate Limiting Bypass Simulation Report ===\n")
            f.write(f"Test File: {src}\n")
            f.write(f"Date/Time: {datetime.now()}\n\n")
            f.write(result)
        print(f"[+] Report saved to {filename}")

if __name__ == "__main__":
    root = tk.Tk()
    app = RateLimitBypassTool(root)
    root.mainloop()
