import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import re
import os
from datetime import datetime

class APIKeyTester:
    def __init__(self, root):
        self.root = root
        self.root.title("API Key Exposure Tester")
        self.root.geometry("500x400")
        self.root.configure(bg="#1e1e2f")
        self.create_widgets()

    def create_widgets(self):
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("TLabel", background="#1e1e2f", foreground="#ffffff", font=("Segoe UI", 10))
        style.configure("TButton", font=("Segoe UI", 10))
        style.configure("TEntry", font=("Segoe UI", 10))

        ttk.Label(self.root, text="Select JSON or TXT API Response File:").pack(pady=(20, 5))
        self.file_entry = ttk.Entry(self.root, width=50)
        self.file_entry.pack()
        ttk.Button(self.root, text="Browse", command=self.browse_file).pack(pady=(5, 15))

        self.scan_btn = ttk.Button(self.root, text="Scan for API Keys", command=self.scan_file)
        self.scan_btn.pack(pady=10)

        self.result_text = tk.Text(self.root, height=10, width=60, bg="#2a2e3e", fg="#d8dee9", font=("Consolas", 10))
        self.result_text.pack(pady=10)

    def browse_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("JSON or Text Files", "*.json *.txt")])
        self.file_entry.delete(0, tk.END)
        self.file_entry.insert(0, file_path)

    def scan_file(self):
        file_path = self.file_entry.get().strip()
        if not os.path.isfile(file_path):
            messagebox.showerror("File Error", "File not found.")
            return

        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # Common patterns for API keys
        patterns = {
            "Stripe": r"sk_live_[0-9a-zA-Z]{24}|sk_test_[0-9a-zA-Z]{24}",
            "Google": r"AIza[0-9A-Za-z-_]{35}",
            "Generic": r"(?:api[_-]?key|secret)[\"']?\s*[:=]\s*[\"']?([0-9a-zA-Z_\-]{16,45})",
        }

        findings = []

        for key_type, pattern in patterns.items():
            matches = re.findall(pattern, content)
            if matches:
                findings.append((key_type, matches))

        result = ""
        if findings:
            result += "[!] API Key Exposure Detected:\n"
            for key_type, keys in findings:
                for key in keys:
                    result += f" - {key_type}: {key}\n"
        else:
            result += "No API keys found."

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, result)
        self.save_report(file_path, result)

    def save_report(self, source, result):
        os.makedirs("api_key_logs", exist_ok=True)
        filename = f"api_key_logs/api_key_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(filename, "w") as f:
            f.write("=== API Key Exposure Report ===\n")
            f.write(f"Scanned File: {source}\n")
            f.write(f"Date/Time: {datetime.now()}\n\n")
            f.write(result)
        print(f"[+] Report saved to: {filename}")

if __name__ == "__main__":
    root = tk.Tk()
    app = APIKeyTester(root)
    root.mainloop()
