Loan App Penetration Testing Toolkit
About This Project
This is a penetration testing toolkit I designed and developed to ethically assess common vulnerabilities found in loan applications and fintech platforms, with a focus on login, form input, API security, and basic traffic protection mechanisms. I created this to demonstrate practical skills in ethical hacking, scripting, and user-friendly GUI development.

All tools are GUI-based and built in Python using Tkinter. I simulated vulnerable endpoints using dummy files and structures so everything is testable without targeting any real servers or violating any ethical or legal boundaries.

Purpose
I built this project to showcase my understanding of:

OWASP Top 10 vulnerabilities

Ethical penetration testing workflows

Secure coding practices and how to patch issues

Creating useful tools with clean, usable interfaces

Logging and documentation of vulnerabilities discovered

This toolkit is targeted at companies like Lendqr, who work in the fintech space and need developers or engineers who understand both product development and product security.

Tools in This Toolkit
1. SQL Injection Tester
Simulates SQLi attempts on dummy login forms.

Logs responses, vulnerable parameters, and recommendations.

Beautiful GUI for input and test management.

Output stored in sql_logs/.

2. XSS Injection Tester
Injects common Cross-Site Scripting payloads into form fields.

Uses dummy form and response files to simulate reflection-based XSS.

GUI allows selecting input files and viewing simulated attacks.

Results saved to xss_logs/.

3. API Key Exposure Scanner
Scans dummy JSON or configuration files for leaked API keys.

Supports common patterns (Google, AWS, Stripe, etc.).

Highlights key types and recommends next steps.

Output saved in api_logs/.

4. Rate Limiting Bypass Simulator
Mimics attempts to bypass rate-limiting protections using:

Header spoofing

User-agent switching

Burst requests

Works with dummy 429 response files to simulate outcomes.

Results logged to rate_limit_logs/.

What I Used
Languages and Libraries
Python: Primary scripting language

Tkinter: GUI library used for all interfaces

Random, OS, Time: For simulation and backend behavior

Structure and Design
Each tool is in its own standalone .py file.

Each tool has:

A GUI

Logging mechanism

Dummy response generator

Simulation logic

I followed the OWASP Top 10 as a guide to select vulnerabilities.

How to Run Each Tool
Clone or download the toolkit.

Open any tool script (*.py) using Python 3.x.

Load the required dummy file when prompted.

Click the button to simulate the attack.

Check the logs folder for saved outputs.

No external installations are needed as all tools use built-in libraries.

Why This Matters
I understand that fintech companies like Lendqr face constant security challenges. This project shows not only that I understand those risks, but also how to think like an attacker and defend against them. I didn’t just write scripts—I designed a toolkit that is structured, modular, and maintainable. It can be extended for actual use in secure staging environments.

Note
All simulations were built using dummy data. I do not support or encourage the use of this toolkit on real systems unless explicit permission has been granted. It is meant to demonstrate skill, not for malicious use.

